buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1.3'
  }
}

apply plugin: 'me.champeau.gradle.jmh'


apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

apply plugin: 'findbugs'

group = 'com.palominolabs.http'
version = '1.1.1-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility = JavaVersion.VERSION_1_6

ext {
  depVersions = [
      slf4j: '1.7.10',
  ]
}

dependencies {
  compile 'com.google.code.findbugs:jsr305:3.0.0'
  compile 'com.google.guava:guava:15.0'
  compile 'org.apache.commons:commons-lang3:3.1'

  compile "org.slf4j:slf4j-api:$depVersions.slf4j"
  testRuntime "org.slf4j:slf4j-simple:$depVersions.slf4j"
  testRuntime "org.slf4j:log4j-over-slf4j:$depVersions.slf4j"
  testRuntime "org.slf4j:jcl-over-slf4j:$depVersions.slf4j"
  testCompile "org.slf4j:jul-to-slf4j:$depVersions.slf4j"

  testCompile 'junit:junit:4.12'

  testCompile 'org.codehaus.groovy:groovy-all:2.2.1'

  jmh 'org.openjdk.jmh:jmh-core:1.6.1'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.6.1'
}

repositories {
  jcenter()
}

task sourcesJar(type: Jar, dependsOn: classes) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

artifacts {
  // register in 'archives' config so they will be signed
  archives sourcesJar
  archives javadocJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

// Set sonatypeUsername and sonatypePassword in your ~/.gradle/gradle.properties to be able to use this.
uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { deployment -> signing.signPom(deployment) }

      repository(url: isReleaseVersion ?
          "https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
          "https://oss.sonatype.org/content/repositories/snapshots/") {
        def u = project.hasProperty('sonatypeUsername') ? sonatypeUsername : 'FIXME'
        def p = project.hasProperty('sonatypePassword') ? sonatypePassword : 'FIXME'
        authentication(userName: u, password: p)
      }

      pom.project {
        name 'url-builder'
        packaging 'jar'
        description 'Create properly-encoded URLs with a builder-style API.'
        url 'https://github.com/palominolabs/url-builder'

        scm {
          url 'scm:git@github.com:palominolabs/url-builder.git'
          connection 'scm:git@github.com:palominolabs/url-builder.git'
          developerConnection 'scm:git@github.com:palominolabs/url-builder.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'marshallpierce'
            name 'Marshall Pierce'
          }
        }
      }
    }
  }
}

findbugs {
  toolVersion = '3.0.0'
  // don't findbugs the tests
  sourceSets = [sourceSets.main]
}
tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

